//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.4.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using JwtSecurity.HelperClasses;
using JwtSecurity.FactoryClasses;
using JwtSecurity.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace JwtSecurity.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Role'.<br/><br/></summary>
	[Serializable]
	public partial class RoleEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<UserRoleEntity> _userRoles;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RoleEntityStaticMetaData _staticMetaData = new RoleEntityStaticMetaData();
		private static RoleRelations _relationsFactory = new RoleRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name UserRoles</summary>
			public static readonly string UserRoles = "UserRoles";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RoleEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RoleEntityStaticMetaData()
			{
				SetEntityCoreInfo("RoleEntity", InheritanceHierarchyType.None, false, (int)JwtSecurity.EntityType.RoleEntity, typeof(RoleEntity), typeof(RoleEntityFactory), false);
				AddNavigatorMetaData<RoleEntity, EntityCollection<UserRoleEntity>>("UserRoles", a => a._userRoles, (a, b) => a._userRoles = b, a => a.UserRoles, () => new RoleRelations().UserRoleEntityUsingRoleId, typeof(UserRoleEntity), (int)JwtSecurity.EntityType.UserRoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RoleEntity()
		{
		}

		/// <summary> CTor</summary>
		public RoleEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RoleEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RoleEntity</param>
		public RoleEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="roleId">PK value for Role which data should be fetched into this Role object</param>
		public RoleEntity(System.Int32 roleId) : this(roleId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="roleId">PK value for Role which data should be fetched into this Role object</param>
		/// <param name="validator">The custom validator object for this RoleEntity</param>
		public RoleEntity(System.Int32 roleId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.RoleId = roleId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RoleEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'UserRole' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUserRoles() { return CreateRelationInfoForNavigator("UserRoles"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RoleEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RoleRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'UserRole' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUserRoles { get { return _staticMetaData.GetPrefetchPathElement("UserRoles", CommonEntityBase.CreateEntityCollection<UserRoleEntity>()); } }

		/// <summary>The RoleId property of the Entity Role<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Role"."RoleId".<br/>Table field type characteristics (type, precision, scale, length): Integer, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 RoleId
		{
			get { return (System.Int32)GetValue((int)RoleFieldIndex.RoleId, true); }
			set	{ SetValue((int)RoleFieldIndex.RoleId, value); }
		}

		/// <summary>The RoleName property of the Entity Role<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Role"."RoleName".<br/>Table field type characteristics (type, precision, scale, length): Varchar, 0, 0, 255.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String RoleName
		{
			get { return (System.String)GetValue((int)RoleFieldIndex.RoleName, true); }
			set	{ SetValue((int)RoleFieldIndex.RoleName, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'UserRoleEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserRoleEntity))]
		public virtual EntityCollection<UserRoleEntity> UserRoles { get { return GetOrCreateEntityCollection<UserRoleEntity, UserRoleEntityFactory>("Role", true, false, ref _userRoles); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END
	}
}

namespace JwtSecurity
{
	public enum RoleFieldIndex
	{
		///<summary>RoleId. </summary>
		RoleId,
		///<summary>RoleName. </summary>
		RoleName,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace JwtSecurity.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Role. </summary>
	public partial class RoleRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between RoleEntity and UserRoleEntity over the 1:n relation they have, using the relation between the fields: Role.RoleId - UserRole.RoleId</summary>
		public virtual IEntityRelation UserRoleEntityUsingRoleId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "UserRoles", true, new[] { RoleFields.RoleId, UserRoleFields.RoleId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRoleRelations
	{
		internal static readonly IEntityRelation UserRoleEntityUsingRoleIdStatic = new RoleRelations().UserRoleEntityUsingRoleId;

		/// <summary>CTor</summary>
		static StaticRoleRelations() { }
	}
}
